import os
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, JobQueue
from flask import Flask, request, jsonify
import json
from threading import Thread
from flask_cors import CORS, cross_origin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤—Å—Ç–∞–≤—å —Å–≤–æ–π –∏–∑ BotFather)
BOT_TOKEN = os.environ.get('BOT_TOKEN', '—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å')

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
TEST_MODE = True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
jobs = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É)
def save_data():
    try:
        data_to_save = {}
        for user_id, data in user_data.items():
            data_copy = data.copy()
            if data_copy['left_home_time']:
                data_copy['left_home_time'] = data_copy['left_home_time'].isoformat()
            data_to_save[str(user_id)] = data_copy
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime)
def load_data():
    global user_data
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            loaded_data = json.load(f)
            user_data = {}
            for user_id_str, data in loaded_data.items():
                data_copy = data.copy()
                if data_copy.get('left_home_time'):
                    data_copy['left_home_time'] = datetime.fromisoformat(data_copy['left_home_time'])
                user_data[int(user_id_str)] = data_copy
    except FileNotFoundError:
        user_data = {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è API
app = Flask(__name__)
CORS(app)

@app.route('/status', methods=['POST'])
@cross_origin()
def update_status():
    data = request.json
    user_id = data.get('user_id')
    status = data.get('status')
    if not user_id or status not in ['–¥–æ–º–∞', '–Ω–µ –¥–æ–º–∞']:
        return jsonify({'success': False, 'error': 'Invalid data'}), 400
    if user_id not in user_data:
        user_data[user_id] = {'status': '–¥–æ–º–∞', 'emergency_contact': '', 'left_home_time': None, 'warnings_sent': 0}
    user_data[user_id]['status'] = status
    if status == '–Ω–µ –¥–æ–º–∞':
        user_data[user_id]['left_home_time'] = datetime.now()
        user_data[user_id]['warnings_sent'] = 0
        if TEST_MODE:
            job_timeout = 60  # 1 –º–∏–Ω—É—Ç–∞
        else:
            job_timeout = 24 * 3600  # 24 —á–∞—Å–∞
        try:
            job = application.job_queue.run_once(check_user_status_callback, job_timeout, data=user_id, name=str(user_id))
            jobs[str(user_id)] = job
            logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è {user_id} —á–µ—Ä–µ–∑ {job_timeout} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
    save_data()
    return jsonify({'success': True})

@app.route('/contact', methods=['POST'])
@cross_origin()
def update_contact():
    data = request.json
    user_id = data.get('user_id')
    contact = data.get('contact')
    if not user_id or not contact.startswith('@'):
        return jsonify({'success': False, 'error': 'Invalid contact'}), 400
    if user_id not in user_data:
        user_data[user_id] = {'status': '–¥–æ–º–∞', 'emergency_contact': '', 'left_home_time': None, 'warnings_sent': 0}
    user_data[user_id]['emergency_contact'] = contact
    save_data()
    return jsonify({'success': True})

# –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def check_user_status_callback(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {user_id} –≤ {datetime.now().strftime('%H:%M:%S')}")
    if user_id not in user_data or user_data[user_id]['status'] != '–Ω–µ –¥–æ–º–∞':
        return
    data = user_data[user_id]
    if TEST_MODE:
        warning_text = "ü§ó –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–≤–∏–Ω—å —Å–ª–∞–π–¥–µ—Ä, –µ—Å–ª–∏ —Ç—ã –¥–æ–º–∞!"
        emergency_timeout = 30  # 30 —Å–µ–∫—É–Ω–¥
    else:
        warning_text = "ü§ó –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–≤–∏–Ω—å —Å–ª–∞–π–¥–µ—Ä, –µ—Å–ª–∏ —Ç—ã –¥–æ–º–∞! (24 —á–∞—Å–∞ –ø—Ä–æ—à–ª–æ)"
        emergency_timeout = 3600  # 1 —á–∞—Å
    try:
        await context.bot.send_message(chat_id=user_id, text=warning_text)
        data['warnings_sent'] = 1
        save_data()
        emergency_job = context.job_queue.run_once(send_emergency_alert_callback, emergency_timeout, data=user_id, name=f"{user_id}_emergency")
        jobs[f"{user_id}_emergency"] = emergency_job
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –¢–∞–π–º–µ—Ä –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_emergency_alert_callback(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data
    logger.info(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –¥–ª—è {user_id} –≤ {datetime.now().strftime('%H:%M:%S')}")
    if user_id not in user_data or user_data[user_id]['status'] != '–Ω–µ –¥–æ–º–∞':
        return
    data = user_data[user_id]
    emergency_contact = data['emergency_contact']
    if not emergency_contact:
        logger.warning(f"–ù–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {user_id}")
        return
    if TEST_MODE:
        message = f"üö® –¢–µ—Å—Ç! {user_id} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç 1.5 –º–∏–Ω. –ü—Ä–æ–≤–µ—Ä—å!"
    else:
        message = f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ! {user_id} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç 25 —á–∞—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å!"
    try:
        await context.bot.send_message(chat_id=emergency_contact, text=message)
        await context.bot.send_message(chat_id=user_id, text="üö® –ö–æ–Ω—Ç–∞–∫—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω! –ü–µ—Ä–µ–¥–≤–∏–Ω—å —Å–ª–∞–π–¥–µ—Ä!")
        data['warnings_sent'] = 2
        save_data()
        logger.info(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {emergency_contact}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()
if not application.job_queue:
    logger.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
else:
    application.job_queue.start()
application.add_handler(CommandHandler("start", lambda update, context: update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini App! –û—Ç–∫—Ä–æ–π –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")))

# –ó–∞–ø—É—Å–∫
def run_bot():
    application.run_polling()

if __name__ == '__main__':
    load_data()
    Thread(target=run_bot).start()
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
